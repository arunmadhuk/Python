# Form implementation generated from reading ui file 'pomodoro_timer.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import sys
import time

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import *
from PyQt6.QtGui import *
from PyQt6.QtWidgets import *



class PomodoroTimerGUI(QMainWindow):
    
    def __init__(self):
        super().__init__()
      

        self.timer = QTimer()
        self.DEFAULT_WORK_TIME = 25
        self.DEFAULT_SHORT_BREAK = 5
        self.DEFAULT_LONG_BREAK = 15
        self.DEFAULT_NO_OF_CYCLES = 4
        self.current_cycle = 0
        self.short_breaks_taken = 0
        self.is_break_time = False
        self.current_timer_type = "Pomodoro"
     
        self.setupUi(self)


    def setupUi(self, pomodoroTimer):
        pomodoroTimer.setObjectName("pomodoroTimer")
        pomodoroTimer.setWindowModality(QtCore.Qt.WindowModality.WindowModal)
        pomodoroTimer.resize(400, 450)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(pomodoroTimer.sizePolicy().hasHeightForWidth())
        pomodoroTimer.setSizePolicy(sizePolicy)
        pomodoroTimer.setMinimumSize(QtCore.QSize(400, 450))
        pomodoroTimer.setMaximumSize(QtCore.QSize(400, 450))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setItalic(True)
        pomodoroTimer.setFont(font)
        icon_path = os.path.abspath("pomodoro-technique.png")
        icon = QIcon(icon_path)
        self.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(parent=pomodoroTimer)
        self.centralwidget.setMaximumSize(QtCore.QSize(500, 500))
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(0, 10, 390, 384))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.rb_pomodoro = QtWidgets.QRadioButton(parent=self.layoutWidget)
        self.rb_pomodoro.setObjectName("rb_pomodoro")
        self.horizontalLayout.addWidget(self.rb_pomodoro)
        spacerItem1 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.cb_pomodoro = QtWidgets.QCheckBox(parent=self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cb_pomodoro.sizePolicy().hasHeightForWidth())
        self.cb_pomodoro.setSizePolicy(sizePolicy)
        self.cb_pomodoro.setMaximumSize(QtCore.QSize(50, 16777215))
        self.cb_pomodoro.setText("")
        self.cb_pomodoro.setObjectName("cb_pomodoro")
        self.horizontalLayout.addWidget(self.cb_pomodoro)
        self.sb_pomodoro = QtWidgets.QSpinBox(parent=self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sb_pomodoro.sizePolicy().hasHeightForWidth())
        self.sb_pomodoro.setSizePolicy(sizePolicy)
        self.sb_pomodoro.setMinimumSize(QtCore.QSize(75, 40))
        self.sb_pomodoro.setMaximumSize(QtCore.QSize(75, 40))
        self.sb_pomodoro.setPrefix("")
        self.sb_pomodoro.setMinimum(1)
        self.sb_pomodoro.setMaximum(60)
        self.sb_pomodoro.setSingleStep(1)
        self.sb_pomodoro.setObjectName("sb_pomodoro")
        self.horizontalLayout.addWidget(self.sb_pomodoro)
        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem3 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem3)
        self.rb_long_break = QtWidgets.QRadioButton(parent=self.layoutWidget)
        self.rb_long_break.setObjectName("rb_long_break")
        self.horizontalLayout_4.addWidget(self.rb_long_break)
        spacerItem4 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem4)
        self.cb_long_break = QtWidgets.QCheckBox(parent=self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cb_long_break.sizePolicy().hasHeightForWidth())
        self.cb_long_break.setSizePolicy(sizePolicy)
        self.cb_long_break.setMaximumSize(QtCore.QSize(50, 16777215))
        self.cb_long_break.setText("")
        self.cb_long_break.setObjectName("cb_long_break")
        self.horizontalLayout_4.addWidget(self.cb_long_break)
        self.sb_long_break = QtWidgets.QSpinBox(parent=self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sb_long_break.sizePolicy().hasHeightForWidth())
        self.sb_long_break.setSizePolicy(sizePolicy)
        self.sb_long_break.setMinimumSize(QtCore.QSize(75, 40))
        self.sb_long_break.setMaximumSize(QtCore.QSize(75, 40))
        self.sb_long_break.setPrefix("")
        self.sb_long_break.setMinimum(1)
        self.sb_long_break.setMaximum(20)
        self.sb_long_break.setSingleStep(1)
        self.sb_long_break.setObjectName("sb_long_break")
        self.horizontalLayout_4.addWidget(self.sb_long_break)
        spacerItem5 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem5)
        self.gridLayout.addLayout(self.horizontalLayout_4, 2, 0, 1, 1)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem6 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem6)
        self.rb_short_break = QtWidgets.QRadioButton(parent=self.layoutWidget)
        self.rb_short_break.setObjectName("rb_short_break")
        self.horizontalLayout_3.addWidget(self.rb_short_break)
        spacerItem7 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem7)
        self.cb_short_break = QtWidgets.QCheckBox(parent=self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cb_short_break.sizePolicy().hasHeightForWidth())
        self.cb_short_break.setSizePolicy(sizePolicy)
        self.cb_short_break.setMaximumSize(QtCore.QSize(50, 16777215))
        self.cb_short_break.setText("")
        self.cb_short_break.setObjectName("cb_short_break")
        self.horizontalLayout_3.addWidget(self.cb_short_break)
        self.sb_short_break = QtWidgets.QSpinBox(parent=self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sb_short_break.sizePolicy().hasHeightForWidth())
        self.sb_short_break.setSizePolicy(sizePolicy)
        self.sb_short_break.setMinimumSize(QtCore.QSize(75, 40))
        self.sb_short_break.setMaximumSize(QtCore.QSize(75, 40))
        self.sb_short_break.setSuffix("")
        self.sb_short_break.setPrefix("")
        self.sb_short_break.setMinimum(1)
        self.sb_short_break.setMaximum(10)
        self.sb_short_break.setSingleStep(1)
        self.sb_short_break.setObjectName("sb_short_break")
        self.horizontalLayout_3.addWidget(self.sb_short_break)
        spacerItem8 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem8)
        self.gridLayout.addLayout(self.horizontalLayout_3, 1, 0, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout, 0, 0, 1, 3)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_3.addItem(spacerItem9, 1, 0, 1, 1)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_8.addItem(spacerItem10)
        self.frame_short_break = QtWidgets.QFrame(parent=self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_short_break.sizePolicy().hasHeightForWidth())
        self.frame_short_break.setSizePolicy(sizePolicy)
        self.frame_short_break.setMinimumSize(QtCore.QSize(200, 100))
        self.frame_short_break.setMaximumSize(QtCore.QSize(185, 120))
        self.frame_short_break.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_short_break.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_short_break.setObjectName("frame_short_break")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame_short_break)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.lcd_min_timer = QtWidgets.QLCDNumber(parent=self.frame_short_break)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lcd_min_timer.sizePolicy().hasHeightForWidth())
        self.lcd_min_timer.setSizePolicy(sizePolicy)
        self.lcd_min_timer.setMinimumSize(QtCore.QSize(75, 75))
        self.lcd_min_timer.setMaximumSize(QtCore.QSize(75, 75))
        font = QtGui.QFont()
        font.setPointSize(26)
        font.setItalic(True)
        self.lcd_min_timer.setFont(font)
        self.lcd_min_timer.setSmallDecimalPoint(False)
        self.lcd_min_timer.setDigitCount(2)
        self.lcd_min_timer.setProperty("intValue", 25)
        self.lcd_min_timer.setObjectName("lcd_min_timer")
        self.horizontalLayout_6.addWidget(self.lcd_min_timer)
        self.label = QtWidgets.QLabel(parent=self.frame_short_break)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMaximumSize(QtCore.QSize(50, 16777215))
        self.label.setObjectName("label")
        self.horizontalLayout_6.addWidget(self.label)
        self.lcd_sec_timer = QtWidgets.QLCDNumber(parent=self.frame_short_break)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lcd_sec_timer.sizePolicy().hasHeightForWidth())
        self.lcd_sec_timer.setSizePolicy(sizePolicy)
        self.lcd_sec_timer.setMinimumSize(QtCore.QSize(75, 75))
        self.lcd_sec_timer.setMaximumSize(QtCore.QSize(75, 75))
        font = QtGui.QFont()
        font.setPointSize(26)
        font.setItalic(True)
        self.lcd_sec_timer.setFont(font)
        self.lcd_sec_timer.setSmallDecimalPoint(False)
        self.lcd_sec_timer.setDigitCount(2)
        self.lcd_sec_timer.setProperty("intValue", 59)
        self.lcd_sec_timer.setObjectName("lcd_sec_timer")
        self.horizontalLayout_6.addWidget(self.lcd_sec_timer)
        self.gridLayout_2.addLayout(self.horizontalLayout_6, 0, 0, 1, 1)
        self.horizontalLayout_8.addWidget(self.frame_short_break)
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_8.addItem(spacerItem11)
        self.verticalLayout.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem12)
        self.btn_start = QtWidgets.QPushButton(parent=self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setItalic(True)
        self.btn_start.setFont(font)
        self.btn_start.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.btn_start.setIconSize(QtCore.QSize(20, 20))
        self.btn_start.setObjectName("btn_start")
        self.horizontalLayout_7.addWidget(self.btn_start)
        self.btn_stop = QtWidgets.QPushButton(parent=self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setItalic(True)
        self.btn_stop.setFont(font)
        self.btn_stop.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.btn_stop.setIconSize(QtCore.QSize(20, 20))
        self.btn_stop.setObjectName("btn_stop")
        self.horizontalLayout_7.addWidget(self.btn_stop)
        spacerItem13 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem13)
        self.verticalLayout.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(parent=self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMaximumSize(QtCore.QSize(175, 16777215))
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.lbl_current_cycle = QtWidgets.QLabel(parent=self.layoutWidget)
        self.lbl_current_cycle.setText("")
        self.lbl_current_cycle.setObjectName("lbl_current_cycle")
        self.horizontalLayout_2.addWidget(self.lbl_current_cycle)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_3 = QtWidgets.QLabel(parent=self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setMaximumSize(QtCore.QSize(175, 16777215))
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_5.addWidget(self.label_3)
        self.lbl_short_break = QtWidgets.QLabel(parent=self.layoutWidget)
        self.lbl_short_break.setText("")
        self.lbl_short_break.setObjectName("lbl_short_break")
        self.horizontalLayout_5.addWidget(self.lbl_short_break)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.gridLayout_3.addLayout(self.verticalLayout, 1, 1, 1, 1)
        spacerItem14 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_3.addItem(spacerItem14, 1, 2, 1, 1)
        pomodoroTimer.setCentralWidget(self.centralwidget)
        self.statubar = QtWidgets.QStatusBar(parent=pomodoroTimer)
        self.statubar.setObjectName("statubar")
        pomodoroTimer.setStatusBar(self.statubar)

        self.retranslateUi(pomodoroTimer)
        self.timer_seconds = self.DEFAULT_WORK_TIME * 60
        minutes = self.timer_seconds // 60 
        seconds = self.timer_seconds % 60
        self.lcd_sec_timer.display(f"{seconds:02d}")
        self.lcd_min_timer.display(f"{minutes:02d}")
        self.remaining_seconds = self.timer_seconds
        self.rb_pomodoro.setChecked(True)
        self.cb_pomodoro.setChecked(True)
        self.cb_short_break.setChecked(True)
        self.cb_long_break.setChecked(True)
        self.sb_pomodoro.setDisabled(True)
        self.sb_short_break.setDisabled(True)
        self.sb_long_break.setDisabled(True)
        QtCore.QMetaObject.connectSlotsByName(pomodoroTimer)

    def retranslateUi(self, pomodoroTimer):
        _translate = QtCore.QCoreApplication.translate
        pomodoroTimer.setWindowTitle(_translate("pomodoroTimer", "Pomodoro Timer"))
        self.rb_pomodoro.setText(_translate("pomodoroTimer", "Pomodoro"))
        self.sb_pomodoro.setToolTip(_translate("pomodoroTimer", "Minimum Value is 1 Mins and Maximum is 60 Mins"))
        self.sb_short_break.setToolTip(_translate("pomodoroTimer", "Minimum is 1 Mins and maximum is 10 Mins"))
        self.sb_long_break.setToolTip(_translate("pomodoroTimer", "Minimum is 1 Mins and maximum is 20 Mins"))
        self.rb_short_break.setText(_translate("pomodoroTimer", "Short Break"))
        self.rb_long_break.setText(_translate("pomodoroTimer", "Long Break"))
        self.label.setText(_translate("pomodoroTimer", ":"))
        self.btn_start.setText(_translate("pomodoroTimer", "Start"))
        self.btn_stop.setText(_translate("pomodoroTimer", "Stop"))
        self.label_2.setText(_translate("pomodoroTimer", "Current Cycle :"))
        self.label_3.setText(_translate("pomodoroTimer", "Short Break :"))
        self.lbl_current_cycle.setText(f"{self.current_cycle} / {self.DEFAULT_NO_OF_CYCLES}")
        self.lbl_short_break.setText(f"{self.short_breaks_taken} / {self.DEFAULT_NO_OF_CYCLES - 1}")
        self.btn_start.clicked.connect(self.start_pomodoro)
        self.btn_stop.clicked.connect(self.stop_timer)
        self.rb_pomodoro.toggled.connect(self.select_timer)
        self.rb_short_break.toggled.connect(self.select_timer)
        self.rb_long_break.toggled.connect(self.select_timer)
        self.sb_pomodoro.setValue(self.DEFAULT_WORK_TIME)
        self.sb_short_break.setValue(self.DEFAULT_SHORT_BREAK)
        self.sb_long_break.setValue(self.DEFAULT_LONG_BREAK)
        self.cb_pomodoro.toggled.connect(self.sb_pomodoro.setDisabled)
        self.cb_short_break.toggled.connect(self.sb_short_break.setDisabled)
        self.cb_long_break.toggled.connect(self.sb_long_break.setDisabled)
        self.sb_pomodoro.valueChanged.connect(lambda value :self.set_user_selected_timer('pomodoro', value))
        self.sb_short_break.valueChanged.connect(lambda value :self.set_user_selected_timer('short_break', value))
        self.sb_long_break.valueChanged.connect(lambda value :self.set_user_selected_timer('long_break', value))
        
        
        
    def set_user_selected_timer(self, timer_type, value ):
        print(f"set_user_selected_timer {timer_type} - {value}")
        if timer_type == "pomodoro":
            self.DEFAULT_WORK_TIME = value
            self.cb_pomodoro.setChecked(True)
        elif timer_type == "short_break":
            self.DEFAULT_SHORT_BREAK = value
            self.cb_short_break.setChecked(True)
        elif timer_type == "long_break":
            self.DEFAULT_LONG_BREAK = value
            self.cb_long_break.setChecked(True)
            
        self.select_timer()
        
    def select_timer(self):
        if self.rb_pomodoro.isChecked():
            self.current_timer_type = "Pomodoro"
            self.timer_seconds = self.DEFAULT_WORK_TIME * 60
            self.remaining_seconds = self.timer_seconds
        elif self.rb_short_break.isChecked():
            self.current_timer_type = "Short Break"
            self.timer_seconds = self.DEFAULT_SHORT_BREAK * 60
            self.remaining_seconds = self.timer_seconds
        elif self.rb_long_break.isChecked():
            self.current_timer_type = "Long Break"
            self.timer_seconds = self.DEFAULT_LONG_BREAK * 60
            self.remaining_seconds = self.timer_seconds
        

        minutes = self.timer_seconds // 60 
        seconds = self.timer_seconds % 60
        self.lcd_sec_timer.display(f"{seconds:02d}")
        self.lcd_min_timer.display(f"{minutes:02d}")

    def show_dialog(self, title, message,icon):
        dlg = QMessageBox(self)
        dlg.setWindowTitle(title)
        dlg.setText(message)
        dlg.setStandardButtons(
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        dlg.setIcon(icon)
        button = dlg.exec()

        if button == QMessageBox.StandardButton.Yes:
            print("Yes!")
        else:
            print("No!")

        return button

    def play_sound(self, title, message):
        try:
            os.system('afplay /System/Library/Sounds/Ping.aiff 2> /dev/null || echo -e "\a"')
            # os.system(f'notify-send "{title}" "{message}"')
        except Exception as e:
            print(e)
            print('\a')


    def update_timer(self):
        # This gets called automatically every second by QTimer
        if self.remaining_seconds > 0:
            self.remaining_seconds -= 1
            self.update_display()
        else:
            self.timer.stop()
            self.on_timer_completed()
            self.play_sound("Time Up", f"Pomodoro Timer completed")
    

    def on_timer_completed(self):
        print("Timer completed!")
        self.handle_ui_elements(disable=False)
        if self.is_break_time:
            self.play_sound("Break Time Up", "Break time completed!")
            self.ask_next_action_after_break()
        else:
            self.play_sound("Work Time Up", "Pomodoro work session completed!")
            self.current_cycle += 1
            self.ask_next_action_after_work()


    def handle_ui_elements(self, disable):
        self.rb_pomodoro.setDisabled(disable)
        self.rb_short_break.setDisabled(disable)
        self.rb_long_break.setDisabled(disable)
        self.btn_start.setDisabled(disable)
        self.btn_stop.setDisabled(not disable)
    
        self.lbl_current_cycle.setText(f"{self.current_cycle} / {self.DEFAULT_NO_OF_CYCLES}")
        self.lbl_short_break.setText(f"{self.short_breaks_taken} / {self.DEFAULT_NO_OF_CYCLES - 1}")
        # print(f"rb_pomodoro.isChecked(): {self.rb_pomodoro.isChecked()}, rb_short_break.isChecked(): {self.rb_short_break.isChecked()}, rb_long_break.isChecked(): {self.rb_long_break.isChecked()}")
        print(f"Current Timer Type : {self.current_timer_type}")
        if self.current_timer_type == "Pomodoro":
            if self.rb_pomodoro.isChecked() == False:
                self.rb_pomodoro.setChecked(True)
                self.rb_short_break.setChecked(False)
                self.rb_long_break.setChecked(False) 
        elif self.current_timer_type == "Short Break":
            if self.rb_short_break.isChecked() == False:
                self.rb_pomodoro.setChecked(False)
                self.rb_short_break.setChecked(True)
                self.rb_long_break.setChecked(False) 
        elif self.current_timer_type == "Long Break":
            if self.rb_long_break.isChecked() == False:
                self.rb_pomodoro.setChecked(False)
                self.rb_short_break.setChecked(False)
                self.rb_long_break.setChecked(True) 

        if disable:
            self.btn_start.setText("Running...")
        else:
            self.btn_start.setText("Start")
            self.select_timer()    


    def update_display(self):
        minutes = self.remaining_seconds // 60
        seconds = self.remaining_seconds % 60
    
        self.lcd_sec_timer.display(f"{seconds:02d}")
        self.lcd_min_timer.display(f"{minutes:02d}")
        print(f"Time : {minutes:02d}:{seconds:02d}", end="\r")


    def ask_next_action_after_work(self):
        print(f"Pomodoro timer cycle '{self.current_cycle}' of '{self.DEFAULT_NO_OF_CYCLES}' finished.")

        if self.current_cycle >= self.DEFAULT_NO_OF_CYCLES:
            message = f"Pomodoro timer cycle completed. \nYou can take a Long break of {self.DEFAULT_LONG_BREAK} minutes"
            button = self.show_dialog("Pomodoro Timer", message, QMessageBox.Icon.Information)
            
            if button == QMessageBox.StandardButton.Yes:
                self.current_timer_type = "Long Break"
                self.start_the_timer(self.DEFAULT_LONG_BREAK, is_break=True)
        else:
            message = f"Pomodoro timer cycle finished.\nYou can take a Short break '{self.short_breaks_taken+1}' for '{self.DEFAULT_SHORT_BREAK}' minutes. \nDo you want to start the short break now?"
            button = self.show_dialog("Pomodoro Timer", message, QMessageBox.Icon.Question)
            
            if button == QMessageBox.StandardButton.Yes:
                self.current_timer_type = "Short Break"
                self.short_breaks_taken += 1
                self.start_the_timer(self.DEFAULT_SHORT_BREAK, is_break=True)
            else:
                self.ask_start_next_cycle()

    def ask_next_action_after_break(self):
        message = "Break time completed!\nDo you want to start the next cycle of Pomodoro timer now?"
        button = self.show_dialog("Pomodoro Timer", message, QMessageBox.Icon.Question)
        
        if button == QMessageBox.StandardButton.Yes:
            self.current_timer_type = "Pomodoro"
            self.start_next_cycle()
        else:
            print("Pomodoro session paused.")

    def ask_start_next_cycle(self):
        message = "Do you want to start the next cycle of Pomodoro timer now?"
        button = self.show_dialog("Pomodoro Timer", message, QMessageBox.Icon.Question)
        
        if button == QMessageBox.StandardButton.Yes:
            self.current_cycle = 0
            self.short_breaks_taken = 0
            self.start_next_cycle()
        else:
            print("Pomodoro session paused.")

    def start_next_cycle(self):
        if self.current_cycle < self.DEFAULT_NO_OF_CYCLES:
            self.start_the_timer(self.DEFAULT_WORK_TIME, is_break=False)
        else:
            print("All Pomodoro cycles completed!")

    def start_the_timer(self, timer_minute, is_break=False):
        # Create and start QTimer
        self.is_break_time = is_break
        self.timer_seconds = timer_minute * 60
        self.remaining_seconds = self.timer_seconds

        if self.timer.isActive():
            self.timer.stop()
   
        self.timer.timeout.connect(self.update_timer)
        self.timer.start(1000)  # Update every second

        # Initial display
        self.handle_ui_elements(disable=True)
        self.update_display()



    def stop_timer(self):
            """Method to stop the timer manually"""
            if self.timer.isActive():
                button = self.show_dialog("Pomodoro Timer","Do you want to stop the timer ? (Y/N)",QMessageBox.Icon.Question)   
                if button == QMessageBox.StandardButton.Yes:    
                    self.timer.stop()
                    print("Timer stopped manually")
                    self.handle_ui_elements(disable=False)


    def start_pomodoro(self):
            print(f" -- Pomodoro timer started -- ")
            self.current_cycle = 0
            self.short_breaks_taken = 0
            self.is_break_time = False
            
            # Start the first work session
            self.start_the_timer(self.DEFAULT_WORK_TIME, is_break=False)

            
if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = PomodoroTimerGUI()
    ui.show()
    # MainWindow.show()
    app.exec()